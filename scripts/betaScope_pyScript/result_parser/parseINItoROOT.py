import ROOT
from array import array
from parseBetaResultsToExcel import *

from ROOTFile import RootFile

import logging, coloredlogs

logging.basicConfig()
log = logging.getLogger(__name__)
coloredlogs.install(level="CRITICAL", logger=log)


def parseINItoROOT(fname="_results.ini"):
    config = configparser.ConfigParser()
    config.read(fname)
    config_section = config.sections()
    log.info(config_section)

    dut_trig = ["DUT"]

    tfile = ROOT.TFile("_results.root", "RECREATE")
    tfile.cd()
    branches = {}

    # look for description file generated by the DAQ
    description_file = None
    for descr in os.listdir("./"):
        if "_Description.ini" in descr:
            description_file = configparser.ConfigParser()
            description_file.read(descr)
            log.info("found DAQ description file")
            break
    try:
        run_description = description_file["Run_Description"]
    except:
        run_description = None
    if run_description:
        try:
            run_number = run_description["Run_Number"]
        except:
            run_number = "NA"
        try:
            dut_name = run_description["DUT_Senor_Name"]
        except:
            dut_name = "DUT_Name_NA"
        try:
            fluence_type = run_description["DUT_Fluence_Type"]
        except:
            fluence_type = "Fluence_Type_NA"
        try:
            fluence = run_description["DUT_Fluence"]
        except:
            fluence = "Fluence_NA"
        try:
            board = run_description["DUT_Readout_Board"]
        except:
            board = "Board_NA"
        try:
            board_number = run_description["DUT_Readout_Board_Number"]
        except:
            board_number = "Board_Number_NA"
        try:
            temperature = run_description["Temperature"]
        except:
            temperature = "Temperature_NA"
        try:
            trig_bias = run_description["Trigger_Voltage"]
        except:
            trig_bias = "Trigger_Voltage_NA"
    else:
        run_number = "NA"
        dut_name = "DUT_Name_NA"
        fluence_type = "Fluence_Type_NA"
        fluence = "Fluence_NA"
        board = "Board_NA"
        board_number = "Board_Number_NA"
        temperature = "Temperature_NA"
        trig_bias = "Trigger_Voltage_NA"

    sensor_name = f"{dut_name}-Fluence {fluence_type}-{fluence}--{board}{board_number}"

    # total transipedence (include amp)
    resistance = 4700

    for ch in dut_trig:
        rowCounter = 1

        ttree = ROOT.TTree(f"run{run_number}", "from _results.ini")
        for par in INI_TO_EXCEL.keys():
            if "SensorName" in par:
                branches[par] = array("b").frombytes(sensor_name.encode())
                if branches[par]:
                    ttree.Branch(par, branches[par], f"{par}/C")
                else:
                    ttree.Branch(par, "NA", f"{par}/C")
            elif "runNumber" in par:
                continue
            else:
                branches[par] = array("d", [0])
                ttree.Branch(par, branches[par], f"{par}/D")

        for bias in config_section:
            myRunNum = f"{run_number}->{rowCounter}"
            if ch in bias:
                if ch != "Trig":
                    run_header = bias.split(",")
                    Bias = run_header[1].replace("V", "")
                    cycle = run_header[2]
                else:
                    try:
                        SensorName =run_description["Trigger_Sensor_Name"]
                    except:
                        pass
                    Bias = config[bias]["trigger_bias"]
                    run_header = bias.split(",")
                    cycle = run_header[2]
                for par in par_list:
                    if par == "SensorName":
                        continue
                    elif par == "runNumber":
                        continue
                    elif par == "Temp":
                        try:
                            Temp = config[bias]["temperature"]
                        except:
                            Temp = "-30"
                        branches[par][0] = float(Temp)
                    elif par == "Bias":
                        branches[par][0] = float(Bias)
                    elif par == "cycle":
                        branches[par][0] = float(cycle)
                    elif par == "Resistance":
                        branches[par][0] = float(resistance)
                    else:
                        branches[par][0] = float(config[bias][par])
            ttree.Fill()

        ttree.Write("run" + str(run_number), ROOT.TObject.kOverwrite)
        tfile.Close()


def parseINItoROOT2(fileout, title="Hi", run_folder="./", fname="_results.ini"):
    fileout.cd()
    config = configparser.ConfigParser()
    config.read(fname)
    config_section = config.sections()
    # print(config_section)

    description_file = None
    try:
        for descr in os.listdir(run_folder):
            if "_Description.ini" in descr:
                description_file = configparser.ConfigParser()
                description_file.read(descr)
                print("found DAQ description file")
                break
    except Exception as e:
        print(Exception)

    dut_trig = ["DUT"]

    branches = {}

    print(title)
    RunNum = title.split("_")[1]
    SensorName = title
    trigBias = 395
    Temp = 0

    if "_20C" in title:
        Temp = 20
        trigBias = 420
    if "_neg30C" in title:
        trigBias = 390
        Temp = -30
    if "_neg20C" in title:
        Temp = -20
    if "_neg10C" in title:
        Temp = -10

    if description_file:
        try:
            RunNum = description_file["Run_Description"]["Run_Number"]
            SensorName = description_file["Run_Description"]["DUT_Senor_Name"]
            SensorName += (
                "-Fluence "
                + description_file["Run_Description"]["DUT_Fluence_Type"]
                + "-"
                + description_file["Run_Description"]["DUT_Fluence"]
            )
            SensorName += (
                "--"
                + description_file["Run_Description"]["DUT_Readout_Board"]
                + "-"
                + description_file["Run_Description"]["DUT_Readout_Board_Number"]
            )

            Temp = description_file["Run_Description"]["Temperature"]
            trigBias = description_file["Run_Description"]["Trigger_Voltage"]
        except Exception as e:
            print(Exception)

    Resistance = 4700

    for ch in dut_trig:
        rowCounter = 1
        # print RunNum, title
        ttree = ROOT.TTree(str(RunNum), title)
        for par in INI_TO_EXCEL.keys():
            if "SensorName" in par:
                branches[par] = array("b").frombytes(str(SensorName).encode())
                ttree.Branch(par, branches[par], f"{par}/C")
            elif "runNumber" in par:
                continue
            else:
                branches[par] = array("d", [0])
                ttree.Branch(par, branches[par], f"{par}/D")

        for bias in config_section:
            myRunNum = str(RunNum) + "->" + str(rowCounter)
            if ch in bias:
                if ch != "Trig":
                    run_header = bias.split(",")
                    Bias = run_header[1].replace("V", "")
                    cycle = run_header[2]
                else:
                    try:
                        SensorName = description_file["Run_Description"][
                            "Trigger_Sensor_Name"
                        ]
                    except:
                        pass
                    Bias = config[bias]["trigger_bias"]
                    run_header = bias.split(",")
                    cycle = run_header[2]
                for par in par_list:
                    if par == "SensorName":
                        continue
                    elif par == "runNumber":
                        continue
                    elif par == "Temp":
                        try:
                            Temp = config[bias]["temperature"]
                        except:
                            Temp = "-30"
                        branches[par][0] = float(Temp)
                    elif par == "Bias":
                        branches[par][0] = float(Bias)
                    elif par == "cycle":
                        branches[par][0] = float(cycle)
                    elif par == "Resistance":
                        branches[par][0] = float(Resistance)
                    else:
                        try:
                            branches[par][0] = float(config[bias][par])
                        except:
                            branches[par][0] = 0

            ttree.Fill()

        ttree.Write()  # "run"+str(RunNum), ROOT.TObject.kOverwrite)


def parseRawINIToROOT(filename="raw_results.ini"):
    config = configparser.ConfigParser()
    config.read(filename)
    output_file = RootFile("raw_results.root", "raw")
    created_branches = False
    for sec in config.sections():
        if not created_branches:
            for key in config[sec]:
                output_file.create_branch(key, "d")
            output_file.create_branch("bias", "d")
            output_file.create_branch("cycle", "i")
            created_branches = True
        for key in config[sec]:
            output_file[key][0] = float(config[sec][key])
        run_header = sec.split(",")
        output_file["bias"][0] = float(run_header[0].replace("V", ""))
        cycle = int(run_header[1])
        output_file.fill()


if __name__ == "__main__":
    parseINItoROOT()
    parseRawINIToROOT()
